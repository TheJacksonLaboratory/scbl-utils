from ..base import Base
from ..custom_types import stripped_str, stripped_str_pk, int_pk, samplesheet_str
from sqlalchemy.orm import Mapped, relationship, mapped_column, validates
from sqlalchemy import ForeignKey
from .entities import Lab, Person
from datetime import date
# TODO: implement some kind of test that makes sure each platform type
# has a corresponding file in the data_models folder
class Platform(Base, kw_only=True):
    __tablename__ = 'platform'

    # Platform attributes
    name: Mapped[stripped_str_pk]

class Project(Base, kw_only=True):
    __tablename__ = 'project'

    # Project attributes
    id: Mapped[stripped_str_pk]
    description: Mapped[stripped_str | None] = mapped_column(
        default=None, index=True, compare=False
    )

    # Parent foreign keys
    lab_id: Mapped[int] = mapped_column(ForeignKey('lab.id'), init=False, repr=False)

    # Parent models
    lab: Mapped[Lab] = relationship()

    # Child models
    data_sets: Mapped[list['DataSet']] = relationship(back_populates='project', default_factory=list, repr=False, compare=False)

    # TODO: add validation for this
    @validates('id')
    def check_id(self, key: str, id: str | None) -> str | None:
        return id.upper().strip() if isinstance(id, str) else None


class DataSet(Base, kw_only=True):
    __tablename__ = 'data_set'

    # TODO: add validation/auto-setting for id depending on
    # platform/assay type

    # DataSet attributes
    id: Mapped[int_pk] = mapped_column(init=False, repr=False)
    name: Mapped[samplesheet_str] = mapped_column(index=True)
    ilab_request_id: Mapped[stripped_str] = mapped_column(
        index=True
    )  # TODO: ilab request ID validation
    processing_start_date: Mapped[date | None] = mapped_column(default=None, repr=False)

    # Parent foreign keys
    project_id: Mapped[str] = mapped_column(
        ForeignKey('project.id'), init=False, repr=False
    )
    platform_name: Mapped[str] = mapped_column(ForeignKey('platform.name'), init=False)
    submitter_id: Mapped[int] = mapped_column(
        ForeignKey('person.id'), init=False, repr=False
    )

    # Parent models
    project: Mapped[Project] = relationship(back_populates='data_sets')
    submitter: Mapped[Person] = relationship()

    # TODO should there be another column for the date that work was
    # begun on the dataset? this will help generate a batch_id

    # Automatically set attributes
    batch_id: Mapped[int] = mapped_column(init=False, default=None, repr=False)

    __mapper_args__ = {
        'polymorphic_on': 'platform_name',
    }

    @validates('batch_id')
    def set_batch_id(self, key: str, batch_id: None) -> int:
        # If it's decided that more things constitute a batch, this will
        # be easy to update.

        # Note that submitter email, institution, name, and ORCID have
        # been picked instead of the person ID because a person is not
        # assigned an ID until they enter the database.

        # There is a small likelihood that two people with the same name
        # and institution both have an autogenerated email and no ORCID.
        # If these two people submit on the same day, the batch_id of
        # the two datasets will be the same.
        # TODO: this should be fixed somehow
        to_hash = (
            self.processing_start_date,
            self.submitter.email,
            self.submitter.institution_id,
            self.submitter.first_name,
            self.submitter.last_name,
            self.submitter.orcid,
        )
        return hash(to_hash)


class Sample(Base, kw_only=True):
    __tablename__ = 'sample'

    # Sample attributes
    id: Mapped[int_pk] = mapped_column(init=False)
    name: Mapped[samplesheet_str] = mapped_column(index=True)
    date_received: Mapped[date] = mapped_column(default_factory=date.today)

    # Parent foreign keys
    data_set_id: Mapped[int] = mapped_column(
        ForeignKey('data_set.id'), init=False, repr=False
    )
    platform_name: Mapped[str] = mapped_column(ForeignKey('platform.name'), init=False)

    __mapper_args__ = {'polymorphic_on': 'platform_name'}
